/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'stefan.marx' at '14.07.14 15:15' with Gradle 1.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
// PLUGIN PUBLISH
//================
apply plugin: 'maven-publish'


ext.antlr = [
        grammarpackage: "de.appdynamics.ace.metric.query",
        antlrSource: 'src/main/antlr',
        destinationDir: "src/main/java"
]

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    maven {
        url "https://raw.github.com/Appdynamics/artifact-library/master/repo/"
    }

}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"

    compile "com.appdynamics:rest-api:1.0.9"
    compile 'org.apache.commons:commons-lang3:3.3.2'

    compile "org.antlr:antlr4-runtime:4.3"
    antlr4 'org.antlr:antlr4:4.3'

}



task generateGrammarSource( type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()

}


compileJava.dependsOn (generateGrammarSource)


ext{
    grunGrammar = "de.appdynamics.ace.metric.query.MetricQuery"
    grunRule = "query"
    grunFile = "testStatements"
    grunArgs = "-tree"
}

task grun(type: JavaExec, dependsOn: compileJava) {
    classpath configurations.antlr4
    classpath sourceSets.main.output


    main = 'org.antlr.v4.runtime.misc.TestRig'
    args(project.grunGrammar)
    args(project.grunRule)
    if (project.hasProperty('grunArgs')) {
        args(project.grunArgs)
    }
    //args(project.grunFile)
    doFirst {
        project.logger.info("Running grun with grammar ${project.grunGrammar} and rule ${project.grunRule} with args ${project.hasProperty('grunArgs') ? project.grunArgs : ""} on input file ${project.grunFile}")
    }
}

test.testLogging { showStandardStreams = true }

group = 'com.appdynamics.ace.restQuery'
version = '0.2'


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.name
            from components.java
        }
    }
    repositories {
        maven {
            url "file:////vlab/maven/artifact-library/repo"
        }
    }
}




